{"name":"cliunit","tagline":"Simple CLI Testing Pseudo-Framework","body":"##### Simple CLI Testing Pseudo-Framework\r\n\r\n![Simple CLI Testing Pseudo-Framework](http://oi40.tinypic.com/2052w68.jpg)\r\n\r\n### What!? Why?\r\n\r\nFor a recent project, I wanted a very simple way to run some simple tests against my CLI output.\r\nI know there are a number of these kinds of things out there, but most of the ones I looked at were more complex then I wanted.\r\nTo start, I created a basic shell script to test my CLI, but as I began to add to it, and want more from it, I decided to take\r\na few minutes and build a pseudo-framework out of it.\r\n\r\nI call it a \"pseudo-framework\" because it's really more of a helper, which gives you a handfull of assertions to run against\r\nbash commands. Well, that and it doesn't really have a name.\r\n\r\n### How?\r\n\r\n##### Install\r\n\r\nNote, in CLIunit `latest` means latest stable version.\r\n\r\n    curl -L https://raw.github.com/jmervine/CLIunit/master/install.sh | bash\r\n    # installs latest to ~/.bin/cliunit\r\n\r\n    curl -L https://raw.github.com/jmervine/CLIunit/master/install.sh | bash -s master\r\n    # installs master to ~/.bin/cliunit\r\n\r\n    curl -L https://raw.github.com/jmervine/CLIunit/master/install.sh | bash -s --global\r\n    # installs latest to /usr/local/bin/cliunit\r\n\r\n    curl -L https://raw.github.com/jmervine/CLIunit/master/install.sh | bash -s --local\r\n    # installs latest to ./CLIunit.sh\r\n\r\n##### Basic Usage\r\n\r\nA basic test file looks like this:\r\n\r\n    # file: tests.sh\r\n\r\n    function run_tests {\r\n    ####################################################\r\n    # Tests go here.\r\n    ####################################################\r\n      COMMAND=\"/path/to/your/command\"\r\n      assert_grep \"$COMMAND\" \"Usage\" \\\r\n        \"deplay usage without params\"\r\n      assert_grep \"$COMMAND --help\" \"Usage\" \\\r\n        \"deplay usage with help\"\r\n      assert_grep \"$COMMAND --arg2 foobar\" \"Usage\" \\\r\n        \"deplay usage without required arg\"\r\n      refute_grep \"$COMMAND --arg1 foobar\" \"Usage\" \\\r\n        \"work with required arg\"\r\n    ####################################################\r\n    }\r\n\r\nRun like this:\r\n\r\n    $ ./CLIunit.sh ./tests.sh\r\n\r\n> See `test/testOne.sh` for more examples.\r\n\r\n##### Before / After Hooks\r\n\r\nIn addition to assertion, CLIunit also supports before and after hooks. Simply define a `before` or `after` function.\r\n\r\n    function before {\r\n        ./some_setup_script.sh\r\n        echo \"Running before CLIunit assertions.\r\n    }\r\n\r\n    function after {\r\n        ./some_cleanup_script.sh\r\n        echo \"Running after CLIunit assertions.\r\n    }\r\n\r\nNote: Currently, if before or after are undefined, a warning is thrown but safely ignored. See [Issue #5](https://github.com/jmervine/CLIunit/issues/5) for details and updates.\r\n\r\nExample:\r\n```\r\n./CLIunit.sh: line 58: type: after: not found`\r\n```\r\n\r\n##### Assertions\r\n\r\nHere's a full list of assertions at the time of this writing:\r\n\r\n* `assert \"CMD\" \"FAIL MESSAGE\"`\r\n* `refute \"CMD\" \"FAIL MESSAGE\"`\r\n* `assert_equal \"FIRST\" \"SECOND\" \"FAIL MESSAGE\"`\r\n* `refute_equal \"FIRST\" \"SECOND\" \"FAIL MESSAGE\"`\r\n* `assert_numeq \"FIRST\" \"SECOND\" \"FAIL MESSAGE\"`\r\n* `refute_numeq \"FIRST\" \"SECOND\" \"FAIL MESSAGE\"`\r\n* `assert_grep \"CMD\" \"GREP\" \"FAIL MESSAGE\"`\r\n* `refute_grep \"CMD\" \"GREP\" \"FAIL MESSAGE\"`\r\n* `assert_file \"FILE\" \"FAIL MESSAGE\"`\r\n* `refute_file \"FILE\" \"FAIL MESSAGE\"`\r\n* `assert_dir \"DIR\" \"FAIL MESSAGE\"`\r\n* `refute_dir \"DIR\" \"FAIL MESSAGE\"`\r\n\r\n##### Known Issues\r\n\r\nCurrently, `assert_grep` and `refute_grep` only support a single word, no spaces. I'm sure there's a simple solution to this, but I haven't had\r\na change to troubleshoot it yet and it wasn't an issue for my use case.\r\n","google":"UA-32343843-1","note":"Don't delete this file! It's used internally to help with page regeneration."}